{"name":"Restendpoint","tagline":"Asynchronous REST client based on Apache Http Async","body":"# restendpoint [![Build Status](https://travis-ci.org/avarabyeu/restendpoint.svg?branch=master)](https://travis-ci.org/avarabyeu/restendpoint)\r\n\r\nAsynchronous REST client based on Apache Http Async Client\r\n\r\n\r\n* [Maven Dependencies](#maven-dependencies)\r\n* [Getting Started](#getting-started)\r\n   * [As Simple As It's Possible](#as-simple-as-its-possible)\r\n   * [Creating](#creating)    \r\n      * [Default and Simpliest](#default-and-simpliest)\r\n      * [Using Builder](#using-builder)\r\n      * [Build HttpAsyncClient explicitly](#build-httpasyncclient-explicitly)      \r\n   * [Sending Requests](#sending-requests)\r\n      * [GET](#get)\r\n\r\nBasically, **restendpoint** is convenient wrapper around \r\n[Apache HttpComponents Async Client](http://hc.apache.org/httpcomponents-asyncclient-4.0.x/)\r\n\r\n## Maven Dependencies\r\n\r\nLast stable version:\r\n```xml\r\n<dependency>\r\n    <groupId>com.github.avarabyeu</groupId>\r\n    <artifactId>restendpoint</artifactId>\r\n    <version>0.0.2</version>\r\n</dependency>\r\n```\r\n\r\n## Getting Started\r\n\r\n### As Simple As It's Possible\r\n\r\n```java\r\n/* Creates default RestEndpoint */\r\nRestEndpoint endpoint = RestEndpoints.createDefault(\"http://airports.pidgets.com/\");\r\n\r\n /* Executes GET request to\r\n  * http://airports.pidgets.com/v1/airports?country=Belarus&format=json\r\n  * asynchronously\r\n  */\r\nWill<String> airports = endpoint.get(\r\n   \"/v1/airports\",\r\n   ImmutableMap.<String, String>builder()\r\n      .put(\"country\", \"Belarus\").put(\"format\", \"json\").build(),\r\n   String.class);\r\n\r\n/* Waits for result and prints it once received */\r\nSystem.out.println(airports.obtain());\r\n```\r\n\r\n### Creating\r\n\r\n#### Default and Simpliest\r\n```java\r\nRestEndpoint endpoint = RestEndpoints.createDefault(\"http://airports.pidgets.com/\");\r\n```\r\nCreates RestEndpoint with all availible serializers, default http client configuration and built-in error handler. \r\n\r\n\r\n#### Using Builder\r\n```java\r\nRestEndpoint endpoint = RestEndpoints.create()\r\n   .withBaseUrl(\"http://base_url_of_rest_service\")\r\n   .withSerializer(new GsonSerializer())\r\n   .withErrorHandler(new YourCustomErrorHandler())\r\n   .withBasicAuth(\"login\", \"password\")\r\n   .build();\r\n```   \r\nCreates RestEndpoint with only JSON serializer based on Google GSON, your custom error handler. Each request to server will contain Basic Authentication headers (preemptive authentication, see more details here: [Apache Client Authentication](http://hc.apache.org/httpcomponents-client-ga/tutorial/html/authentication.html))\r\n\r\n\r\n#### Build HttpAsyncClient explicitly\r\nSometimes you need more deep http client configuration. Here is the example:\r\n\r\n```java\r\nHttpAsyncClientBuilder httpClientBuilder = HttpAsyncClientBuilder.create();\r\nCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\r\ncredentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(\"user\", \"password\"));\r\nhttpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);\r\nhttpClientBuilder.setMaxConnTotal(20);\r\nhttpClientBuilder.setMaxConnPerRoute(5);\r\n\r\nRestEndpoint endpoint = RestEndpoints.create().withBaseUrl(HTTP_TEST_URK)\r\n   .withSerializer(new StringSerializer()).withHttpClient(httpClientBuilder.build())\r\n   .build();\r\n```\r\nSo, you are able to configure HttpClient explicitly, but in this case builder's methods like #withBasicAuth() <b>will be overwritten</b>.\r\n\r\n\r\n### Sending Requests\r\n\r\n#### GET\r\n\r\n```java\r\nWill<String> responseBody = endpoint.get(\"/\", String.class);\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}